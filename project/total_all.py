from tkinter import messagebox
import pandas as pd
import glob
import os
import sys
from collections import defaultdict
import matplotlib.pyplot as plt
import tempfile
from config_graph import ColorConfig


categories = {
    'English' : [
        "General Inquiry",
        "Estimated Cost",
        "Contact My Doctor at Bangkok Hospital Pattaya",
        "Other"
    ],

    'Thai' : [
        "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
        "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
        "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏û‡∏±‡∏ó‡∏¢‡∏≤",
        "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
    ],

    'Russia' : [
        "–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å",
        "–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ü–µ–Ω—É",
        "–ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä–∞—á—É",
        "–î—Ä—É–≥–æ–µ"
    ],
    'Arabic' : [
        "General Inquiry",
        "Estimated Cost",
        "Contact My Doctor at Bangkok Hospital Pattaya",
        "Other"
    ],

    'Chinese' : [
        "ÊôÆÈÄöÂí®ËØ¢",
        "È¢Ñ‰º∞‰ª∑Ê†ºÂí®ËØ¢",
        "ËÅîÁ≥ªËä≠ÊèêÈõÖÊõºË∞∑ÂåªÈô¢ÂåªÁîü",
        "ÂÖ∂‰ªñ"
    ],

    'German' : [
        "Allgemeine Anfrage",
        "Vorraussichtliche Kosten",
        "Arzt im Bangkok Hospital Pattaya kontaktieren",
        "Andere"
    ]
}

class TotalMonth:
    def __init__(self, folder_path):
        self.folder_path = folder_path
    
    def inquiry(self):
        folder = self.folder_path
        if not folder or not os.path.isdir(folder):
            messagebox.showerror("Error", "Please select a valid folder")
            return

        summary = defaultdict(lambda: defaultdict(int))
        csv_files = glob.glob(os.path.join(folder, "*.csv"))

        for file in csv_files:
            try:
                df = pd.read_csv(file)
                df.columns = df.columns.str.replace('\ufeff', '').str.strip('"')
                col_name = df.columns[0]
            except Exception as e:
                print(f"Failed to process {file}: {e}")
                continue

            if "-en" in file:
                lang = "English"
            elif "-th" in file:
                lang = "Thai"
            elif "-ru" in file:
                lang = "Russia"
            elif "-de" in file:
                lang = "German"
            elif "-ar" in file:
                lang = "Arabic"
            elif "-zh" in file:
                lang = "Chinese"
            else:
                continue

            for cat in categories.get(lang, []):
                count = df[col_name].astype(str).str.strip().eq(cat).sum()
                summary[lang][cat] += count
                
        return summary
        
    def graph_inquiry(self, summary, root):
        # folder = self.folder_path
        # if not folder or not os.path.isdir(folder):
        #     messagebox.showerror("Error", "Please select a valid folder")
        #     return

        # plot graph Type of Email by month 

        # translations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ category ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        translations = {
            # Russian
            "–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å": "General Inquiry",
            "–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ü–µ–Ω—É": "Estimated Cost",
            "–ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä–∞—á—É": "Contact My Doctor at Bangkok Hospital Pattaya",
            "–î—Ä—É–≥–æ–µ": "Other",
            # German
            "Allgemeine Anfrage": "General Inquiry",
            "Vorraussichtliche Kosten": "Estimated Cost",
            "Arzt im Bangkok Hospital Pattaya kontaktieren": "Contact My Doctor at Bangkok Hospital Pattaya",
            "Andere": "Other",
            # Thai
            "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": "General Inquiry",
            "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": "Estimated Cost",
            "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏û‡∏±‡∏ó‡∏¢‡∏≤": "Contact My Doctor at Bangkok Hospital Pattaya",
            "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": "Other",
            # Arabic
            "General Inquiry": "General Inquiry",
            "Estimated Cost": "Estimated Cost",
            "Contact My Doctor at Bangkok Hospital Pattaya": "Contact My Doctor at Bangkok Hospital Pattaya",
            "Other": "Other",
            # Chinese
            "ÊôÆÈÄöÂí®ËØ¢": "General Inquiry",
            "È¢Ñ‰º∞‰ª∑Ê†ºÂí®ËØ¢": "Estimated Cost",
            "ËÅîÁ≥ªËä≠ÊèêÈõÖÊõºË∞∑ÂåªÈô¢ÂåªÁîü": "Contact My Doctor at Bangkok Hospital Pattaya",
            "ÂÖ∂‰ªñ": "Other",
            # English already in English
            "General Inquiry": "General Inquiry",
            "Estimated Cost": "Estimated Cost",
            "Contact My Doctor at Bangkok Hospital Pattaya": "Contact My Doctor at Bangkok Hospital Pattaya",
            "Other": "Other",
        }

        # ‡∏£‡∏ß‡∏° count ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        global_summary = defaultdict(int)

        for lang in summary:
            for cat, count in summary[lang].items():
                eng_cat = translations.get(cat, cat)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
                global_summary[eng_cat] += count
            
        global_summary.pop("", None)  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î error

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        sorted_items = sorted(global_summary.items(), key=lambda x: x[1], reverse=True)
        categories_list = [item[0] for item in sorted_items]
        counts = [item[1] for item in sorted_items]


        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü

        popup = ColorConfig(root, 4)
        color_dict = popup.get_result()
        colorX = popup.get_graph_colors(custom_colors=color_dict)

        plt.figure(figsize=(10, 5))
        bars = plt.bar(categories_list, counts, color=colorX['bar_colors'][:len(categories_list)])

        # ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2, height + 1, str(height),
                    ha='center', va='bottom', fontsize=10, color=colorX['bar_text_color'])

        plt.ylim(0, max(counts) * 1.2)
        plt.title("Type of Email by month", fontsize=14, color=colorX['title_color'])
        plt.xlabel("ALL language", fontsize=12, color=colorX['ylabel_color'])
        plt.ylabel("Total Count", fontsize=12, color=colorX['xlabel_color'])
        plt.xticks(rotation=45, ha='right', color=colorX['xtick_color'])
        plt.yticks(color=colorX['ytick_color'])  # ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        plt.tight_layout()

        def get_base_path():
            if getattr(sys, 'frozen', False):
                # üëâ ‡∏ï‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô .exe ‡∏î‡πâ‡∏ß‡∏¢ pyinstaller
                return sys._MEIPASS if hasattr(sys, '_MEIPASS') else os.path.dirname(sys.executable)
            else:
                # üëâ ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö .py ‡∏õ‡∏Å‡∏ï‡∏¥
                return os.path.dirname(os.path.abspath(__file__))

        # ‡πÉ‡∏ä‡πâ path ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ü
        save_path = os.path.join(get_base_path(), "inquiry.png")

        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü
        plt.savefig(save_path, dpi=300, transparent=True, bbox_inches='tight')

        plt.show()

        # ‚úÖ ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        
    def each_FeedAndPack(self):
        """
        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback & Suggestion ‡πÅ‡∏•‡∏∞ Package Inquiry ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î.
        ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV, ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤, ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Feedback/Package),
        ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤.
        """
        folder_path = self.folder_path
        if not folder_path or not os.path.isdir(folder_path):
            messagebox.showerror("Error", "Please select a valid folder")
            return
        
        # defaultdict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Feedback ‡πÅ‡∏•‡∏∞ Package ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
        feed_counts_by_lang = defaultdict(int)
        pack_counts_by_lang = defaultdict(int)

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        all_csv_files = glob.glob(os.path.join(folder_path, "*.csv"))

        for file in all_csv_files:
            lang = None
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            if "-en" in file:
                lang = "English"
            elif "-th" in file:
                lang = "Thai"
            elif "-ru" in file:
                lang = "Russia"
            elif "-de" in file:
                lang = "German"
            elif "-ar" in file:
                lang = "Arabic"
            elif "-zh" in file:
                lang = "Chinese"
            else:
                continue # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏

            try:
                df = pd.read_csv(file)
                df.columns = df.columns.str.strip().str.replace('\ufeff', '')
                # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
                col_name = df.columns[0]
                count = len(df[col_name]) # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
            except Exception as e:
                print(f"Failed to process {file}: {e}")
                continue

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Feedback ‡∏´‡∏£‡∏∑‡∏≠ Package ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
            if "feedback-suggestion" in file and lang:
                feed_counts_by_lang[lang] += count
            elif "packages" in file and lang:
                pack_counts_by_lang[lang] += count

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Text widget
        output_lines = []
        output_lines.append("\n\n--- Feedback & Package Counts by Language ---")
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á Feedback ‡πÅ‡∏•‡∏∞ Package ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        all_found_languages = sorted(list(set(feed_counts_by_lang.keys()) | set(pack_counts_by_lang.keys())))

        if not all_found_languages:
            output_lines.append("No feedback or package data found.")
        else:
            for lang in all_found_languages:
                output_lines.append(f"Language: {lang}")
                # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Package Inquiry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ (‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö)
                output_lines.append(f"  üì¶ Package Inquiry count: {pack_counts_by_lang[lang]}")
                # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Feedback & Suggestion ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ (‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö)
                output_lines.append(f"  üí¨ Feedback & Suggestion count: {feed_counts_by_lang[lang]}")
                output_lines.append("") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢

        readable_text = "\n".join(output_lines)

        # ‡∏•‡πâ‡∏≤‡∏á Text widget ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
        # self.result_text.delete(1.0, tk.END)
        text_to_insert = str(readable_text) 
        return text_to_insert
        # try:
        #     # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô Text widget
        #     self.result_text.insert(tk.END, text_to_insert)
        # except tk.TclError as e:
        #     # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î TclError ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á messagebox
        #     print(f"Error inserting text into result display: {e}")
        #     print(f"Type of text_to_insert: {type(text_to_insert)}")
        #     print(f"Content of text_to_insert (first 200 chars): {text_to_insert[:200]}...")
        #     messagebox.showerror("UI Update Error", "Could not update the result display. Please check the console for more details.")

        # # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô dictionary ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        # return dict(feed_counts_by_lang), dict(pack_counts_by_lang)
        #     # # ‡∏•‡πâ‡∏≤‡∏á Text widget ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
        #     # self.result_text.delete(1.0, tk.END)

        #     # # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô Text widget
        #     # self.result_text.insert(tk.END, readable_text)

    def each_appointment(self):
        """
        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Appointment ‡πÅ‡∏•‡∏∞ Appointment Recommended ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î.
        ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV, ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤, ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Appointment/Appointment Recommended),
        ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤.
        """
        folder = self.folder_path
        if not folder or not os.path.isdir(folder):
            messagebox.showerror("Error", "Please select a valid folder")
            return

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        langs = ["ar", "de", "en", "ru", "th", "zh"]
        # defaultdict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Appointment ‡πÅ‡∏•‡∏∞ Appointment Recommended ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
        lang_summary = {lang_code: {"appointment count": 0, "appointment recommended count": 0} for lang_code in langs}
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        recommended_files = glob.glob(os.path.join(folder, "*appointment-recommended*.csv"))
        # ‡πÑ‡∏ü‡∏•‡πå appointment ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° recommended)
        normal_files = [f for f in glob.glob(os.path.join(folder, "*appointment*.csv"))
                        if "appointment-recommended" not in os.path.basename(f)]

        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå recommended
        for file in recommended_files:
            try:
                df = pd.read_csv(file)
                df.columns = df.columns.str.strip().str.replace('\ufeff', '')
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (index 1) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
                col_name = df.columns[1] 
                count = len(df[col_name])
            except Exception as e:
                print(f"Failed to process {file}: {e}")
                continue

            for lang_code in langs:
                if f"-{lang_code}" in file:
                    lang_summary[lang_code]["appointment recommended count"] += count
                    break # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏†‡∏≤‡∏©‡∏≤

        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏Å‡∏ï‡∏¥
        for file in normal_files:
            try:
                df = pd.read_csv(file)
                df.columns = df.columns.str.strip().str.replace('\ufeff', '')
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (index 1) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
                col_name = df.columns[1]
                count = len(df[col_name])
            except Exception as e:
                print(f"Failed to process {file}: {e}")
                continue

            for lang_code in langs:
                if f"-{lang_code}" in file:
                    lang_summary[lang_code]["appointment count"] += count
                    break # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏†‡∏≤‡∏©‡∏≤

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Text widget
        output_lines = []
        output_lines.append("\n\n--- Appointment Counts by Language ---")
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        all_found_languages = sorted(list(lang_summary.keys()))

        if not any(lang_summary[lc]["appointment count"] > 0 or lang_summary[lc]["appointment recommended count"] > 0 for lc in all_found_languages):
            output_lines.append("No appointment data found.")
        else:
            for lang_code in all_found_languages:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                full_lang_name = {
                    "en": "English", "th": "Thai", "ru": "Russia", 
                    "de": "German", "ar": "Arabic", "zh": "Chinese"
                }.get(lang_code, lang_code) # ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏©‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°

                output_lines.append(f"Language: {full_lang_name}")
                output_lines.append(f"  üìÖ Appointment count: {lang_summary[lang_code]['appointment count']}")
                output_lines.append(f"  ‚≠ê Appointment Recommended count: {lang_summary[lang_code]['appointment recommended count']}")
                output_lines.append("") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_all_col = sum(lang_summary[lc]["appointment count"] for lc in langs)
        total_all_col_rec = sum(lang_summary[lc]["appointment recommended count"] for lc in langs)

        output_lines.append("--- Overall Totals ---")
        output_lines.append(f"Total Appointment count: {total_all_col}")
        output_lines.append(f"Total Appointment Recommended count: {total_all_col_rec}")
        output_lines.append("---")

        readable_text = "\n".join(output_lines)

        # ‡∏•‡πâ‡∏≤‡∏á Text widget ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
        # self.result_text.delete(1.0, tk.END)
        text_to_insert = str(readable_text)
        return text_to_insert        
        